datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  whiteListed   Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  Garage        Garage[]
  Items         Items[]
  Vehicle       Vehicle[]
}

model VerificationToken {
  id         String   @id @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Garage {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @unique @db.ObjectId
  name        String
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       Items[]
  Vehicle     Vehicle[]
}

model Items {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  garageId    String   @db.ObjectId
  category    String
  name        String
  weight      String
  durability  Float
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  garage      Garage   @relation(fields: [garageId], references: [id], onDelete: Cascade)
}

model Vehicle {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  garageId       String   @db.ObjectId
  category       String
  name           String
  color          String
  model          String
  distanceDriven Float
  dateCreated    DateTime @default(now())
  dateUpdated    DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  garage         Garage   @relation(fields: [garageId], references: [id], onDelete: Cascade)
}
